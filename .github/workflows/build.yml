name: Build and Release SecVault

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install JetBrains Runtime (JBR)
      - name: Download JetBrains Runtime
        run: |
          JBR_URL="https://cache-redirector.jetbrains.com/intellij-jbr/jbrsdk-17.0.10-linux-x64-b1207.1.tar.gz"
          wget $JBR_URL -O jbr.tar.gz
          mkdir jbr
          tar -xzf jbr.tar.gz -C jbr --strip-components=1

      # Set the JAVA_HOME to point to JetBrains Runtime
      - name: Set up JetBrains Runtime
        run: echo "JAVA_HOME=${{ github.workspace }}/jbr" >> $GITHUB_ENV

      - name: Display current directory (for debugging)
        run: pwd

      - name: List files in current directory (for debugging)
        run: ls -la

      - name: Grant execution permissions for gradlew
        run: chmod +x ./gradlew  # Ensure gradlew is executable

      - name: Build the app and force the MSI task to run
        run: ./gradlew packageDeb --rerun-tasks --warning-mode all

      - name: List output directories (for debugging)
        run: ls -R build  # Verify that MSI files are created in expected directory

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v3
        with:
          name: secvault-deb
          path: build/compose/binaries/main/deb/*.deb  # Ensure this matches the actual path after build
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download .deb artifact
        uses: actions/download-artifact@v3
        with:
          name: secvault-deb
          path: ./build/compose/binaries/main/deb/

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ github.run_number }}`,
              name: `Release ${{ github.run_number }}`,
              draft: false,
              prerelease: false,
            });
            core.setOutput('upload_url', release.upload_url);

      - name: Upload .deb to Release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './build/compose/binaries/main/deb/secvault.deb';
            const stat = fs.statSync(path);
            const { data: asset } = await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${steps.create_release.outputs.id},
              name: 'secvault.deb',
              data: fs.readFileSync(path),
              headers: {
                'content-type': 'application/octet-stream',
                'content-length': stat.size
              }
            });